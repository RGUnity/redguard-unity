using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;

namespace RGFileImport
{
	public class Test
	{
		public static void Main(string[] args)
		{
			int[] faces = new int[]{0,1,2,-4,4,5,6,-8,8,9,10,-12,12,13,14,-16,16,17,18,-20,20,21,22,-24,24,25,-27,27,28,-30,30,31,-33,33,34,-36,36,37,-39,39,40,-42,42,43,-45,45,46,-48,48,49,-51,51,52,-54,54,55,-57,57,58,-60,60,61,-63,63,64,-66,66,67,68,-70,70,71,72,-74,74,75,76,-78,78,79,-81,81,82,-84,84,85,-87,87,88,-90,90,91,-93,93,94,95,-97,97,98,-100,100,101,-103,103,104,105,106,107,-109,109,110,111,112,113,-115,115,116,-118,118,119,-121,121,122,-124,124,125,-127,127,128,-130,130,131,-133,133,134,-136,136,137,-139,139,140,-142,142,143,-145,145,146,-148,148,149,-151,151,152,-154,154,155,-157,157,158,-160,160,161,-163,163,164,165,-167,167,168,-170,170,171,-173,173,174,-176,176,177,-179,179,180,-182,182,183,184,-186,186,187,-189,189,190,-192,192,193,-195,195,196,-198,198,199,-201,201,202,-204,204,205,-207,207,208,-210,210,211,-213,213,214,-216,216,217,218,-220,220,221,-223,223,224,-226,226,227,-229,229,230,231,-233,233,234,-236,236,237,-239,239,240,-242,242,243,-245,245,246,-248,248,249,-251,251,252,-254,254,255,-257,257,258,-260,260,261,-263,263,264,-266,266,267,-269,269,270,-272,272,273,-275,275,276,-278,278,279,-281,281,282,-284,284,285,-287,287,288,-290,290,291,-293,293,294,-296,296,297,-299,299,300,-302,302,303,-305,305,306,-308,308,309,-311,311,312,-314,314,315,-317,317,318,-320,320,321,-323,323,324,-326,326,327,-329,329,330,-332,332,333,-335,335,336,-338,338,339,-341,341,342,-344,344,345,-347,347,348,-350,350,351,-353,353,354,-356,356,357,-359,359,360,-362,362,363,-365,365,366,-368,368,369,-371,371,372,-374,374,375,-377,377,378,-380,380,381,-383,383,384,-386,386,387,-389,389,390,-392,392,393,-395,395,396,-398,398,399,-401,401,402,-404,404,405,-407,407,408,-410,410,411,-413,413,414,-416,416,417,-419,419,420,-422,422,423,-425,425,426,-428,428,429,-431,431,432,-434,434,435,-437,437,438,-440,440,441,-443,443,444,-446,446,447,-449,449,450,-452,452,453,-455,455,456,-458,458,459,-461,461,462,-464,464,465,-467,467,468,-470,470,471,-473,473,474,-476,476,477,-479,479,480,-482,482,483,-485,485,486,-488,488,489,-491,491,492,-494,494,495,-497,497,498,-500,500,501,-503,503,504,-506,506,507,-509,509,510,-512,512,513,-515,515,516,-518,518,519,-521,521,522,-524,524,525,-527,527,528,-530,530,531,-533,533,534,-536,536,537,-539,539,540,-542,542,543,-545,545,546,-548,548,549,-551,551,552,-554,554,555,-557,557,558,-560,560,561,-563,563,564,-566,566,567,-569,569,570,-572,572,573,-575,575,576,577,-579,579,580,-582,582,583,-585,585,586,-588,588,589,-591,591,592,-594,594,595,-597,597,598,-600,600,601,-603,603,604,-606,606,607,-609,609,610,-612,612,613,-615,615,616,-618,618,619,-621,621,622,-624,624,625,-627,627,628,-630,630,631,-633,633,634,-636,636,637,638,-640,640,641,-643,643,644,-646,646,647,-649,649,650,-652,652,653,-655,655,656,-658,658,659,-661,661,662,-664,664,665,-667,667,668,-670,670,671,-673,673,674,-676,676,677,-679,679,680,-682,682,683,-685,685,686,687,-689,689,690,-692,692,693,-695,695,696,-698,698,699,-701,701,702,-704,704,705,-707,707,708,-710,710,711,-713,713,714,-716,716,717,-719,719,720,-722,722,723,-725,725,726,-728,728,729,-731,731,732,-734,734,735,-737,737,738,-740,740,741,-743,743,744,-746,746,747,-749,749,750,-752,752,753,-755,755,756,-758,758,759,-761,761,762,-764,764,765,-767,767,768,-770,770,771,-773,773,774,-776,776,777,-779,779,780,-782,782,783,-785,785,786,-788,788,789,-791,791,792,-794,794,795,-797,797,798,-800,800,801,-803,803,804,-806,806,807,-809,809,810,-812,812,813,-815,815,816,-818,818,819,-821,821,822,-824,824,825,-827,827,828,-830,830,831,-833,833,834,-836,836,837,-839,839,840,-842,842,843,-845,845,846,-848,848,849,-851,851,852,-854,854,855,-857,857,858,-860,860,861,862,-864,864,865,-867,867,868,-870,870,871,-873,873,874,-876,876,877,-879,879,880,-882,882,883,-885,885,886,-888,888,889,-891,891,892,-894,894,895,-897,897,898,-900,900,901,-903,903,904,-906,906,907,908,-910,910,911,-913,913,914,-916,916,917,-919,919,920,-922,922,923,-925,925,926,-928,928,929,930,-932,932,933,-935,935,936,-938,938,939,-941,941,942,-944,944,945,-947,947,948,-950,950,951,-953,953,954,-956,956,957,-959,959,960,-962,962,963,-965,965,966,-968,968,969,-971,971,972,-974,974,975,-977,977,978,-980,980,981,-983,983,984,-986,986,987,-989,989,990,-992,992,993,-995,995,996,-998,998,999,-1001,1001,1002,-1004,1004,1005,-1007,1007,1008,-1010,1010,1011,-1013,1013,1014,-1016,1016,1017,-1019,1019,1020,-1022,1022,1023,-1025,1025,1026,-1028,1028,1029,-1031,1031,1032,-1034,1034,1035,-1037,1037,1038,-1040,1040,1041,-1043,1043,1044,-1046,1046,1047,-1049,1049,1050,-1052,1052,1053,-1055,1055,1056,-1058,1058,1059,-1061,1061,1062,-1064,1064,1065,-1067,1067,1068,-1070,1070,1071,-1073,1073,1074,-1076,1076,1077,-1079,1079,1080,-1082,1082,1083,-1085,1085,1086,-1088,1088,1089,-1091,1091,1092,-1094,1094,1095,-1097,1097,1098,-1100,1100,1101,-1103,1103,1104,-1106,1106,1107,-1109,1109,1110,-1112,1112,1113,-1115,1115,1116,-1118,1118,1119,-1121,1121,1122,-1124,1124,1125,-1127,1127,1128,-1130,1130,1131,-1133,1133,1134,-1136,1136,1137,-1139,1139,1140,-1142,1142,1143,-1145,1145,1146,-1148,1148,1149,-1151,1151,1152,-1154,1154,1155,-1157,1157,1158,-1160,1160,1161,-1163,1163,1164,-1166,1166,1167,-1169,1169,1170,-1172,1172,1173,-1175,1175,1176,-1178,1178,1179,-1181,1181,1182,-1184,1184,1185,-1187,1187,1188,-1190,1190,1191,-1193,1193,1194,-1196,1196,1197,-1199,1199,1200,-1202,1202,1203,-1205,1205,1206,-1208,1208,1209,-1211,1211,1212,-1214,1214,1215,-1217,1217,1218,-1220,1220,1221,-1223,1223,1224,-1226,1226,1227,-1229,1229,1230,-1232,1232,1233,-1235,1235,1236,-1238,1238,1239,-1241,1241,1242,-1244,1244,1245,-1247,1247,1248,-1250,1250,1251,-1253,1253,1254,-1256,1256,1257,-1259,1259,1260,-1262,1262,1263,-1265,1265,1266,-1268,1268,1269,-1271,1271,1272,-1274,1274,1275,-1277,1277,1278,-1280,1280,1281,-1283,1283,1284,-1286,1286,1287,-1289,1289,1290,-1292,1292,1293,-1295,1295,1296,-1298,1298,1299,-1301,1301,1302,-1304,1304,1305,-1307,1307,1308,-1310,1310,1311,-1313,1313,1314,-1316,1316,1317,-1319,1319,1320,-1322,1322,1323,-1325,1325,1326,1327,1328,-1330,1330,1331,-1333,1333,1334,-1336,1336,1337,-1339,1339,1340,-1342,1342,1343,1344,-1346,1346,1347,-1349,1349,1350,1351,-1353,1353,1354,-1356,1356,1357,-1359,1359,1360,1361,-1363,1363,1364,-1366,1366,1367,-1369,1369,1370,-1372,1372,1373,-1375,1375,1376,-1378,1378,1379,-1381,1381,1382,-1384,1384,1385,-1387,1387,1388,-1390,1390,1391,-1393,1393,1394,-1396,1396,1397,1398,-1400,1400,1401,-1403,1403,1404,-1406,1406,1407,-1409,1409,1410,-1412,1412,1413,1414,-1416,1416,1417,-1419,1419,1420,-1422,1422,1423,-1425,1425,1426,-1428,1428,1429,-1431,1431,1432,-1434,1434,1435,-1437,1437,1438,-1440,1440,1441,-1443,1443,1444,-1446};

			List<int> face_l = new List<int>();
			for(int i=0;i<faces.Length;i++)
//			for(int i=0;i<100;i++)
			{
				if(faces[i] < 0)
				{
					int sane = (faces[i]*-1);
					face_l.Add(sane);
					print_face(face_l);
					face_l.Clear();
				}
				else
				{
					face_l.Add(faces[i]+1);
				}
			}
		}
		static void print_face(List<int> face_l)
		{
		// triangulate
		// 1 2 3 4
		//  \/
		// 1 2 3
		// 1 3 4
//			Console.WriteLine($"FACE: {String.Join(" ",face_l)}");
			for(int j=0;j<=face_l.Count-3;j++)
			{
				List<int> face_cur = new List<int>();
				int vert_ofs = 1;
				face_cur.Add(face_l[0]);
				face_cur.Add(face_l[vert_ofs+j]);
				face_cur.Add(face_l[vert_ofs+j+1]);
				//Console.WriteLine($"f {String.Join("/1/1 ",face_cur)}/1/1");
				Console.WriteLine($"f {String.Join(" ",face_cur)}");
			}

		}
	}
}
